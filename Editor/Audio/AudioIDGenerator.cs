using System;
using UnityEngine;
using UnityEditor;
using System.IO;
using System.Text;
using AdriKat.Toolkit.DataStructure;
using AdriKat.Toolkit.Settings;
using AdriKat.Toolkit.Utility;
using AdriKat.Toolkit.Utils;

// using AdriKat.Toolkit.Settings;

namespace AdriKat.Toolkit.Audio
{
    public static class AudioIDGenerator
    {
        private static string lastScriptLocation;
        
        [MenuItem("Toolkit/Audio/Refresh AudioIDs Script")]
        public static void GenerateAudioIDClass()
        {
            var db = Resources.Load<AudioDatabase>("AudioDatabase");
            if (db == null)
            {
                Debug.LogError("Missing AudioDatabase in the Resources folder (Create->Audio->AudioDatabase). Ensure its name is exactly 'AudioDatabase.asset'.");
                return;
            }
            
            if (db.allSounds.IsNullOrEmpty())
            {
                Debug.Log("The AudioDatabase is empty. Nothing to generate.");
                return;
            }

            var sb = new StringBuilder();
            sb.AppendLine("//// ***** AdriKat *****");
            sb.AppendLine("//// THIS CODE HAS BEEN AUTO GENERATED BY THE CLASS AudioIDGenerator.");
            sb.AppendLine("//// ANY MODIFICATIONS WILL GET OVERWRITTEN NEXT TIME THE GENERATOR IS RE-RUN.\n");
            sb.AppendLine("namespace AdriKat.Toolkit.Audio\n{");
            sb.AppendLine("\tpublic static class AudioIDs");
            sb.AppendLine("\t{");
            
            foreach (var sound in db.allSounds)
            {
                if (sound == null || sound.id.IsNullOrEmpty()) continue;
                string cleanName = sound.id.Replace(" ", "_");
                sb.AppendLine($"\t\tpublic const string {cleanName} = \"{sound.id}\";");
            }

            sb.AppendLine("\t}\n}");

            string path;

            var audioIDType = Type.GetType("AdriKat.Toolkit.Audio.AudioIDs");
            if (audioIDType == null)
            {
                // The script doesn't exist at all. Use the default path to create it.
                path = AudioSettingsProvider.GetOrCreateSettings().audioIDClassPath;
                Debug.Log($"Generating AudioIDs.cs at '{path}'...");
            }
            else
            {
                if (lastScriptLocation != null && File.Exists(lastScriptLocation))
                {
                    // The previous file cache is "valid". Let's suppose it's not another file with the same name...
                    path = lastScriptLocation;
                }
                else
                {
                    // Let's look for it ourselves (expensive).
                    path = EditorUtils.FindScriptFilePath(audioIDType);
                }
                
                Debug.Log($"Updating AudioIDs.cs at '{path}'...");
            }

            lastScriptLocation = path;
            
            EditorUtils.CreateFoldersRecursively(Path.GetDirectoryName(path));
            File.WriteAllText(path, sb.ToString());

            if (AudioSettingsProvider.GetOrCreateSettings().refreshAssetsAfterGeneration)
            {
                AssetDatabase.Refresh();
            }

            Debug.Log("AudioIDs.cs is now up to date.");
        }
    }
}
